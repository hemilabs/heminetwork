# Copyright (c) 2024-2025 Hemi Labs, Inc.
# Use of this source code is governed by the MIT License,
# which can be found in the LICENSE file.

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj
version: 2

project_name: "heminetwork"
report_sizes: true

before:
  hooks:
    - "go mod tidy"
    - "go mod download"
    - "go mod verify"

gomod:
  # Proxy the module from proxy.golang.org, making the builds verifiable.
  proxy: true

builds:
  # Bitcoin Finality Governor Daemon
  - id: "bfgd"
    binary: "bfgd"
    main: "./cmd/bfgd/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
      - "openbsd"
    goarch: ["amd64", "arm64", "arm"]
    goarm: ["7"]
    ignore:
      - goos: "windows"
        goarch: arm

  # btctool util
  - id: "btctool"
    binary: "btctool"
    main: "./cmd/btctool/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
      - "openbsd"
    goarch: ["amd64", "arm64", "arm"]
    goarm: ["7"]
    ignore:
      - goos: "windows"
        goarch: arm

  # hemictl util
  - id: "hemictl"
    binary: "hemictl"
    main: "./cmd/hemictl/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
      - "openbsd"
    goarch: ["amd64", "arm64", "arm"]
    goarm: ["7"]
    ignore:
      - goos: "windows"
        goarch: arm

  # Key Generator util
  - id: "keygen"
    binary: "keygen"
    main: "./cmd/keygen/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
      - "openbsd"
    goarch: ["amd64", "arm64", "arm"]
    goarm: ["7"]
    ignore:
      - goos: "windows"
        goarch: arm

  # PoP Miner Daemon
  - id: "popmd"
    binary: "popmd"
    main: "./cmd/popmd/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
      - "openbsd"
    goarch: ["amd64", "arm64", "arm"]
    goarm: ["7"]
    ignore:
      - goos: "windows"
        goarch: arm

  # Tiny Bitcoin Daemon
  - id: "tbcd"
    binary: "tbcd"
    main: "./cmd/tbcd/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "windows"
      - "darwin"
    goarch: ["amd64", "arm64"]

  # Hemi Proxy Daemon (hproxyd)
  - id: "hproxyd"
    binary: "hproxyd"
    main: "./cmd/hproxyd/"
    env: ["CGO_ENABLED=0", "GOGC=off"]
    ldflags:
      - "-s -w"
      - "-extldflags '-static'"
      - "-X 'github.com/hemilabs/heminetwork/v2/version.Brand=Hemi Labs'"
      - "-X github.com/hemilabs/heminetwork/v2/version.Major={{ .Major }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Minor={{ .Minor }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.Patch={{ .Patch }}"
      - "-X github.com/hemilabs/heminetwork/v2/version.PreRelease={{ if .IsSnapshot }}dev{{ else }}{{ .Prerelease }}{{ end }}"
    flags: ["-trimpath"]
    goos:
      - "linux"
      - "darwin"
    goarch: ["amd64", "arm64"]

archives:
  - formats: ["tar.gz"]
    name_template: "{{ .ProjectName }}_v{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    wrap_in_directory: true
    allow_different_binary_count: true
    format_overrides:
      - goos: "windows"
        formats: ["zip"]
    files:
      - "README*"
      - "LICENSE*"

# Creates checksum file.
checksum:
  name_template: "{{ .ProjectName }}_v{{ .Version }}_checksums.txt"
  algorithm: "sha256"

# Creates source tarball.
source:
  enabled: true
  name_template: "{{ .ProjectName }}_v{{ .Version }}_sources"
  format: "tar.gz"

# Creates SBOMs for all archives and the source tarball.
sboms:
  - id: "archive"
    artifacts: "archive"
  - id: "source"
    artifacts: "source"

# Signs the checksum file, which includes checksums for all files (including sboms).
signs:
  - cmd: "cosign"
    certificate: "${artifact}.pem"
    args:
      - "sign-blob"
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: "checksum"
    output: true

# Creates Docker images:
#  - bfgd: linux/amd64, linux/arm64
#  - popmd: linux/amd64, linux/arm64, linux/arm/v7
#  - tbcd: linux/amd64, linux/arm64
#  - hproxyd: linux/amd64, linux/arm64
dockers_v2:
  - id: "bfgd"
    ids: [ "bfgd" ]
    dockerfile: "docker/bfgd/goreleaser.Dockerfile"
    images:
      - "hemilabs/bfgd"
      - "ghcr.io/hemilabs/bfgd"
    tags:
      - "{{ .Version }}"
      - "{{if not .Prerelease}}latest{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}.{{ .Minor }}{{end}}"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    build_args:
      VERSION: "{{ .Version }}"
      VCS_REF: "{{ .FullCommit }}"
      BUILD_DATE: "{{ .Date }}"

  - id: "popmd"
    ids: [ "popmd" ]
    dockerfile: "docker/popmd/goreleaser.Dockerfile"
    images:
      - "hemilabs/popmd"
      - "ghcr.io/hemilabs/popmd"
    tags:
      - "{{ .Version }}"
      - "{{if not .Prerelease}}latest{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}.{{ .Minor }}{{end}}"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
      - "linux/arm/v7"
    build_args:
      VERSION: "{{ .Version }}"
      VCS_REF: "{{ .FullCommit }}"
      BUILD_DATE: "{{ .Date }}"

  - id: "tbcd"
    ids: [ "tbcd" ]
    dockerfile: "docker/tbcd/goreleaser.Dockerfile"
    images:
      - "hemilabs/tbcd"
      - "ghcr.io/hemilabs/tbcd"
    tags:
      - "{{ .Version }}"
      - "{{if not .Prerelease}}latest{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}.{{ .Minor }}{{end}}"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    build_args:
      VERSION: "{{ .Version }}"
      VCS_REF: "{{ .FullCommit }}"
      BUILD_DATE: "{{ .Date }}"

  - id: "hproxyd"
    ids: [ "hproxyd" ]
    dockerfile: "docker/hproxyd/goreleaser.Dockerfile"
    images:
      - "hemilabs/hproxyd"
      - "ghcr.io/hemilabs/hproxyd"
    tags:
      - "{{ .Version }}"
      - "{{if not .Prerelease}}latest{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}{{end}}"
      - "{{if not .Prerelease}}{{ .Major }}.{{ .Minor }}{{end}}"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    build_args:
      VERSION: "{{ .Version }}"
      VCS_REF: "{{ .FullCommit }}"
      BUILD_DATE: "{{ .Date }}"

# Signs Docker images and manifests.
docker_signs:
  - cmd: "cosign"
    args: ["sign", "${artifact}", "--yes"]
    artifacts: "all"

# Create file with Docker image digests.
docker_digest:
  name_template: "{{ .ProjectName }}_v{{ .Version }}_image_digests.txt"

# Snapshot version settings.
snapshot:
  version_template: "{{ incpatch .Version }}-dev-{{ .ShortCommit }}"

# Generates the changelog.
changelog:
  use: "github-native"

# Creates a GitHub release.
release:
  github:
    owner: "hemilabs"
    name: "heminetwork"
  replace_existing_draft: true
  prerelease: "auto"

# Closes milestones for the released tag.
milestones:
  - repo:
      owner: "hemilabs"
      name: "heminetwork"
    close: true
    name_template: "{{ .Tag }}"
