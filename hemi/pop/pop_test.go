// Copyright (c) 2024 Hemi Labs, Inc.
// Use of this source code is governed by the MIT License,
// which can be found in the LICENSE file.

package pop

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/hemilabs/heminetwork/v2/hemi"
)

var (
	testKeystoneHeader = &hemi.Header{
		Version:     1,
		BlockNumber: 8463,
		ParentEPHash: [12]byte{
			0xa3, 0x8c, 0x96, 0xeb, 0x92, 0xae, 0xb5, 0xea,
			0x26, 0xa4, 0xb8, 0x84,
		},
		PrevKeystoneEPHash: [12]byte{
			0x42, 0x76, 0x62, 0x5d, 0xa5, 0x0b, 0x3e, 0x1a,
			0x6f, 0xf2, 0xf0, 0x11,
		},
		StateRoot: [32]byte{
			0x5a, 0xee, 0x45, 0x44, 0xa9, 0xe6, 0xcf, 0x38,
			0x42, 0x76, 0x62, 0x5d, 0xa5, 0x0b, 0x3e, 0x1a,
			0xef, 0x34, 0x57, 0xbb, 0xa3, 0x8c, 0x96, 0xeb,
			0x92, 0xae, 0xb5, 0xea, 0x26, 0xa4, 0xb8, 0xfd,
		},
		EPHash: [12]byte{
			0xea, 0xee, 0x45, 0x44, 0xa9, 0xe6, 0xcf, 0x38,
			0xef, 0x34, 0x57, 0xbb,
		},
	}

	testMinerAddress = &MinerAddress{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x11, 0x12, 0x13, 0x14,
	}

	testPoPTransaction = &Transaction{
		Keystone: testKeystoneHeader,
	}
	testPoPPayload = []byte{
		0x6a, 0x4c, 0x4d, 0x48, 0x45, 0x4d, 0x49, 0x01,
		0x00, 0x00, 0x21, 0x0f, 0xa3, 0x8c, 0x96, 0xeb,
		0x92, 0xae, 0xb5, 0xea, 0x26, 0xa4, 0xb8, 0x84,
		0x42, 0x76, 0x62, 0x5d, 0xa5, 0x0b, 0x3e, 0x1a,
		0x6f, 0xf2, 0xf0, 0x11, 0x5a, 0xee, 0x45, 0x44,
		0xa9, 0xe6, 0xcf, 0x38, 0x42, 0x76, 0x62, 0x5d,
		0xa5, 0x0b, 0x3e, 0x1a, 0xef, 0x34, 0x57, 0xbb,
		0xa3, 0x8c, 0x96, 0xeb, 0x92, 0xae, 0xb5, 0xea,
		0x26, 0xa4, 0xb8, 0xfd, 0xea, 0xee, 0x45, 0x44,
		0xa9, 0xe6, 0xcf, 0x38, 0xef, 0x34, 0x57, 0xbb,
	}
)

func TestMinerAddressFromString(t *testing.T) {
	tests := []struct {
		address string
		want    *MinerAddress
	}{
		{
			address: "0102030405060708090a0b0c0d0e0f1011121314",
			want:    testMinerAddress,
		},
		{
			address: "",
			want:    nil,
		},
		{
			address: "0102030405060708090a0b0c0d0e0f101112131",
			want:    nil,
		},
		{
			address: "0102030405060708090a0b0c0d0e0f10111213",
			want:    nil,
		},
		{
			address: "0102030405060708090a0b0c0d0e0f101112131415",
			want:    nil,
		},
	}
	for _, test := range tests {
		got, err := MinerAddressFromString(test.address)
		switch {
		case test.want == nil && err == nil:
			t.Errorf("MinerAddressFromString(%q) succeeded, want error", test.address)
		case test.want != nil && err != nil:
			t.Errorf("MinerAddressFromString(%q) failed: %v", test.address, err)
		case test.want != nil && err == nil:
			if !bytes.Equal(got[:], test.want[:]) {
				t.Errorf("MinerAddressFromString(%q) = %x, want %x", test.address, got, test.want)
			}
		}
	}
}

func TestTransactionSerialize(t *testing.T) {
	ptx := testPoPTransaction

	got := ptx.Serialize()

	want := []byte{
		0x48, 0x45, 0x4d, 0x49, 0x01, 0x00, 0x00, 0x21,
		0x0f, 0xa3, 0x8c, 0x96, 0xeb, 0x92, 0xae, 0xb5,
		0xea, 0x26, 0xa4, 0xb8, 0x84, 0x42, 0x76, 0x62,
		0x5d, 0xa5, 0x0b, 0x3e, 0x1a, 0x6f, 0xf2, 0xf0,
		0x11, 0x5a, 0xee, 0x45, 0x44, 0xa9, 0xe6, 0xcf,
		0x38, 0x42, 0x76, 0x62, 0x5d, 0xa5, 0x0b, 0x3e,
		0x1a, 0xef, 0x34, 0x57, 0xbb, 0xa3, 0x8c, 0x96,
		0xeb, 0x92, 0xae, 0xb5, 0xea, 0x26, 0xa4, 0xb8,
		0xfd, 0xea, 0xee, 0x45, 0x44, 0xa9, 0xe6, 0xcf,
		0x38, 0xef, 0x34, 0x57, 0xbb,
	}
	if !bytes.Equal(got, want) {
		t.Errorf("Got serialized PoP transaction %x, want %x", got, want)
	}
}

func TestEncodeToOpReturn(t *testing.T) {
	ptx := testPoPTransaction

	got, err := ptx.EncodeToOpReturn()
	if err != nil {
		t.Fatalf("Failed to encode PoP transaction: %v", err)
	}
	want := testPoPPayload
	if !bytes.Equal(got, want) {
		t.Errorf("Got encoded PoP transaction %x, want %x", got, want)
	}
}

func TestParseTransactionFromOpReturn(t *testing.T) {
	tests := []struct {
		script       []byte
		wantKeystone *hemi.Header
		wantErr      bool
	}{
		{
			script:       testPoPPayload,
			wantKeystone: testKeystoneHeader,
		},
		{
			script:  []byte{0x6a},
			wantErr: true,
		},
		{
			script:  []byte{0x6a, 0x01, 0x42},
			wantErr: true,
		},
		{
			script:  []byte{0x6a, 0x02, 0x42, 0x56},
			wantErr: true,
		},
		{
			script:  []byte{0x6a, 0x03, 0x42, 0x56, 0x4d},
			wantErr: true,
		},
		{
			script:  []byte{0x6a, 0x04, 0x42, 0x56, 0x4d, 0x01},
			wantErr: true,
		},
		{
			script: []byte{
				0x6a, 0x43, 0x42, 0x56, 0x4d, 0x01, 0x5a, 0xee,
				0x45, 0x44, 0xa9, 0xe6, 0xcf, 0x38, 0xef, 0x34,
				0x57, 0xbb, 0xa3, 0x8c, 0x96, 0xeb, 0x92, 0xae,
				0xb5, 0xea, 0x26, 0xa4, 0xb8, 0xfd, 0x00, 0x00,
				0x21, 0x0f, 0xa3, 0x8c, 0x96, 0xeb, 0x92, 0xae,
				0xb5, 0xea, 0x26, 0xa4, 0xb8, 0x84, 0x42, 0x76,
				0x62, 0x5d, 0xa5, 0x0b, 0x3e, 0x1a, 0x6f, 0xf2,
				0xf0, 0x11, 0xea, 0xee, 0x45, 0x44, 0xa9, 0xe6,
				0xcf, 0x38, 0xef, 0x34, 0x57, 0xbb,
			},
			wantErr: true,
		},
	}

	for i, test := range tests {
		got, err := ParseTransactionFromOpReturn(test.script)
		switch {
		case err == nil && test.wantErr:
			t.Errorf("Test %d - successfully parsed transaction, want error", i)
		case err != nil && !test.wantErr:
			t.Errorf("Test %d - failed to parse transaction: %v", i, err)
		case err == nil && !test.wantErr:
			if !reflect.DeepEqual(got.Keystone, test.wantKeystone) {
				t.Errorf("Test %d - transaction successfully parsed, but keystone differs", i)
			}
		}
	}
}
