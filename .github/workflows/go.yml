# Copyright (c) 2024 Hemi Labs, Inc.
# Use of this source code is governed by the MIT License,
# which can be found in the LICENSE file.

# GitHub Actions workflow to lint, build and test.
name: "Go"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  workflow_call:

concurrency:
  group: "go-${{ github.workflow }}-${{ github.event.number || github.ref }}"
  cancel-in-progress: "${{ github.event_name == 'pull_request' }}"

env:
  GO_VERSION: "1.24.x"
  GOLICENSER_VERSION: "0.3"

permissions:
  contents: read

jobs:
  lint:
    name: "Lint"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: "Setup Go ${{ env.GO_VERSION }}"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: true

      - name: "golangci-lint"
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7.0.0
        with:
          version: "v2.1"

      - name: "golangci-lint fmt"
        run: golangci-lint fmt --diff ./...

      - name: "Cache golicenser"
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: "/home/runner/go/bin/golicenser"
          key: "${{ runner.os }}-golicenser-${{ env.GOLICENSER_VERSION }}"

      - name: "golicenser"
        env:
          LICENSE_HEADER: |
            Copyright (c) {{.year}} {{.author}}
            Use of this source code is governed by the MIT License,
            which can be found in the LICENSE file.
        run: |
          if ! (command -v 'golicenser' >/dev/null); then
            go install github.com/joshuasing/golicenser/cmd/golicenser@v$GOLICENSER_VERSION
          fi
          echo "$LICENSE_HEADER" > license_header.txt
          golicenser -author="Hemi Labs, Inc." -year-mode=git-range ./...

  build:
    name: "Build"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go ${{ env.GO_VERSION }}"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: true
          check-latest: true

      - name: "Download and verify dependencies"
        id: deps
        run: make GOCACHE="$(go env GOCACHE)" go-deps

      - name: "make build"
        run: make GOCACHE="$(go env GOCACHE)" build

  test:
    name: "Test"
    runs-on: "ubuntu-latest"
    services:
      postgres:
        image: postgres:16.3-alpine3.20
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: "postgres"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go ${{ env.GO_VERSION }}"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: true
          check-latest: true

      - name: "Download and verify dependencies"
        id: deps
        run: make GOCACHE="$(go env GOCACHE)" go-deps

      - name: "make test (with E2E tests)"
        env:
          PGTESTURI: "postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable"
          HEMI_DOCKER_TESTS: "1"
        run: make GOCACHE="$(go env GOCACHE)" test

  test-race:
    name: "Test (race)"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go ${{ env.GO_VERSION }}"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: true
          check-latest: true

      - name: "Download and verify dependencies"
        id: deps
        run: make GOCACHE="$(go env GOCACHE)" go-deps

      - name: "make race"
        run: make GOCACHE="$(go env GOCACHE)" race
