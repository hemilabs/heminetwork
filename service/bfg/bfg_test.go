// Copyright (c) 2024 Hemi Labs, Inc.
// Use of this source code is governed by the MIT License,
// which can be found in the LICENSE file.

package bfg

import (
	"bytes"
	"fmt"
	"testing"

	btcchainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	btcwire "github.com/btcsuite/btcd/wire"

	"github.com/hemilabs/heminetwork/api"
	"github.com/hemilabs/heminetwork/bitcoin"
	"github.com/hemilabs/heminetwork/hemi"
)

// BitcoinFinality used to be in production code, it has been removed but
// we want to keep tests around its structure, so define it here
type BitcoinFinality struct {
	HEMIHeader          *hemi.Header    `json:"hemi_header"`
	BTCFinalityHeight   uint64          `json:"btc_finality_height"`
	BTCHeight           uint64          `json:"btc_height"`
	BTCRawBlockHeader   api.ByteSlice   `json:"btc_raw_block_header"`
	BTCRawTransaction   api.ByteSlice   `json:"btc_raw_transaction"`
	BTCTransactionIndex uint32          `json:"btc_transaction_index"`
	BTCMerkleHashes     []api.ByteSlice `json:"btc_merkle_hashes"`
	POPMinerPublicKey   api.ByteSlice   `json:"pop_miner_public_key"`
}

func checkBitcoinFinality(bf *BitcoinFinality) error {
	// Parse BTC block header and transaction.
	btcHeader := &btcwire.BlockHeader{}
	if err := btcHeader.Deserialize(bytes.NewReader(bf.BTCRawBlockHeader)); err != nil {
		return fmt.Errorf("deserialize BTC header: %w", err)
	}
	btcTransaction := &btcwire.MsgTx{}
	if err := btcTransaction.Deserialize(bytes.NewReader(bf.BTCRawTransaction)); err != nil {
		return fmt.Errorf("deserialize BTC transaction: %w", err)
	}
	btcTxHash := btcchainhash.DoubleHashB(bf.BTCRawTransaction)

	// Verify transaction to block header.
	var merkleHashes [][]byte
	for _, merkleHash := range bf.BTCMerkleHashes {
		merkleHashes = append(merkleHashes, merkleHash)
	}
	if err := bitcoin.CheckMerkleChain(btcTxHash, bf.BTCTransactionIndex, merkleHashes, btcHeader.MerkleRoot[:]); err != nil {
		return fmt.Errorf("verify merkle path for transaction: %w", err)
	}

	// XXX - verify HEMI keystone header and PoP miner public key.

	return nil
}

func testBitcoinFinality() *BitcoinFinality {
	return &BitcoinFinality{
		BTCHeight: 2530685,
		BTCMerkleHashes: []api.ByteSlice{
			[]byte{
				0x69, 0x9d, 0x14, 0xb7, 0xbb, 0xe6, 0x87, 0x7a,
				0x6c, 0x30, 0x1e, 0xdd, 0x60, 0xa5, 0x0d, 0x63,
				0x6c, 0xae, 0xe4, 0xdb, 0x4a, 0xce, 0x82, 0xbf,
				0x62, 0xc0, 0xc8, 0xf1, 0xdd, 0x89, 0x98, 0xa3,
			},
			[]byte{
				0x18, 0xf5, 0xbd, 0x44, 0xf1, 0xea, 0x94, 0x43,
				0x7e, 0x15, 0xe7, 0xa3, 0x98, 0xd2, 0x5e, 0xb0,
				0x68, 0x0a, 0x0b, 0xdd, 0xf5, 0x08, 0xd7, 0xbb,
				0xc8, 0xa0, 0x90, 0x35, 0x3e, 0x3a, 0x28, 0x1e,
			},
			[]byte{
				0xa5, 0xee, 0xe1, 0x40, 0x78, 0x15, 0xca, 0x16,
				0xa8, 0x95, 0xab, 0x3a, 0xe9, 0xe6, 0xa6, 0x85,
				0x81, 0x79, 0x90, 0x10, 0xfd, 0x99, 0x89, 0x29,
				0x0b, 0xdf, 0xbe, 0xf0, 0xf6, 0x0a, 0x97, 0x57,
			},
			[]byte{
				0x94, 0xd0, 0xb0, 0x0a, 0x81, 0x59, 0x3e, 0xc3,
				0xfe, 0xb8, 0xba, 0x26, 0xf4, 0x0b, 0x9e, 0x6d,
				0x1a, 0x90, 0xdc, 0xac, 0x8e, 0x8d, 0xdc, 0x97,
				0xf4, 0x7e, 0xff, 0xcb, 0x4d, 0xb7, 0x5c, 0xb7,
			},
			[]byte{
				0x21, 0x9d, 0xa2, 0xe3, 0x06, 0x0d, 0x64, 0xfe,
				0x95, 0xe5, 0x24, 0xc6, 0x39, 0x4f, 0x21, 0xd2,
				0xa1, 0x78, 0x30, 0x34, 0x23, 0xbc, 0x8a, 0x74,
				0xa2, 0xf7, 0x71, 0x1d, 0x9f, 0xb1, 0x0f, 0x58,
			},
		},
		BTCRawBlockHeader: []byte{
			0x00, 0x00, 0xc0, 0x20, 0x3c, 0x43, 0x87, 0x05,
			0xaf, 0x3b, 0x7f, 0x28, 0x4f, 0x8b, 0x79, 0xf3,
			0xf4, 0x94, 0xa0, 0x8f, 0x75, 0x70, 0x32, 0x58,
			0x69, 0x2d, 0x58, 0xe5, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0xac, 0xda,
			0xdd, 0x1b, 0xff, 0xb8, 0xe5, 0xb8, 0x05, 0x41,
			0x33, 0xbd, 0x52, 0xa2, 0x25, 0xfb, 0x3f, 0x9e,
			0xcb, 0x0f, 0x41, 0x11, 0xd5, 0x21, 0xdc, 0xef,
			0xd3, 0x5d, 0xe8, 0xf6, 0xc5, 0x36, 0x20, 0x65,
			0x8c, 0xec, 0x00, 0x1a, 0x02, 0xb2, 0x9c, 0xab,
		},
		BTCRawTransaction: []byte{
			0x02, 0x00, 0x00, 0x00, 0x01, 0x2e, 0x2c, 0x5c,
			0xd1, 0x3e, 0x0f, 0x26, 0x04, 0xc9, 0x67, 0x90,
			0xaa, 0xc2, 0x04, 0x42, 0xc4, 0xac, 0x71, 0x8e,
			0xfc, 0x9e, 0x9c, 0xe7, 0xb7, 0x37, 0xfc, 0xfe,
			0x4c, 0x4f, 0xd6, 0x3f, 0x09, 0x01, 0x00, 0x00,
			0x00, 0x6a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x7c,
			0x88, 0x78, 0xcf, 0x03, 0x66, 0x64, 0xdf, 0xbf,
			0x63, 0x8e, 0xd0, 0x76, 0x0a, 0x1d, 0x00, 0x18,
			0xe3, 0xd1, 0xba, 0xe6, 0xee, 0xeb, 0x1f, 0x41,
			0xed, 0x77, 0x72, 0x57, 0xfa, 0xbd, 0x1b, 0x02,
			0x20, 0x4d, 0x2e, 0x48, 0x43, 0x11, 0x48, 0x68,
			0xe9, 0x15, 0x5c, 0x96, 0xdc, 0xe0, 0xed, 0x10,
			0x2c, 0xd2, 0xb6, 0x79, 0x5c, 0xac, 0x5e, 0x91,
			0x2a, 0xc6, 0x25, 0xb1, 0x51, 0xbf, 0x67, 0x9d,
			0x11, 0x01, 0x21, 0x03, 0x9d, 0x3b, 0x17, 0x47,
			0x09, 0x36, 0x48, 0xca, 0x02, 0x13, 0xd3, 0xea,
			0x41, 0x8d, 0x7e, 0x1a, 0x5e, 0x37, 0xb7, 0x98,
			0xf6, 0xf6, 0xdf, 0x4f, 0xc9, 0xa1, 0x7a, 0x6e,
			0x90, 0xde, 0xaa, 0x12, 0xff, 0xff, 0xff, 0xff,
			0x02, 0xbf, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x19, 0x76, 0xa9, 0x14, 0xdc, 0x11, 0xbb,
			0xaf, 0xe2, 0x3f, 0xdd, 0xca, 0x0e, 0xaf, 0xd5,
			0xf7, 0xb3, 0x2c, 0x9d, 0x67, 0x54, 0xca, 0x73,
			0x4e, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x46, 0x6a, 0x44, 0x78, 0x79,
			0x7a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x15, 0xfe, 0x01, 0xd8,
			0x46, 0xd9, 0xf5, 0x15, 0x0f, 0x40, 0x7e, 0x86,
			0xc1, 0x1f, 0x80, 0xc2, 0x69, 0x5f, 0x93, 0xd3,
			0x2e, 0x3b, 0x08, 0x3c, 0x4b, 0xf9, 0xdf, 0x97,
			0xf3, 0xa2, 0xa2, 0xa2, 0x5a, 0x73, 0x13, 0x75,
			0xcc, 0xb9, 0x7c, 0x9d, 0x26, 0x00,
		},
		BTCTransactionIndex: 19,
	}
}

func TestCheckBitcoinFinality(t *testing.T) {
	bf := testBitcoinFinality()
	if err := checkBitcoinFinality(bf); err != nil {
		t.Errorf("Bitcoin finality check failed: %v", err)
	}

	// Truncate raw bitcoin header.
	bf = testBitcoinFinality()
	bf.BTCRawBlockHeader = bf.BTCRawBlockHeader[:len(bf.BTCRawBlockHeader)-1]
	if err := checkBitcoinFinality(bf); err == nil {
		t.Error("Bitcoin finality succeeded, should have failed")
	}

	// Change TX hash, causing the merkle chain verification to fail.
	bf = testBitcoinFinality()
	bf.BTCRawTransaction[0] = 0x03
	if err := checkBitcoinFinality(bf); err == nil {
		t.Error("Bitcoin finality succeeded, should have failed")
	}

	// Change the transaction index, causing the merkle chain verification to fail.
	bf = testBitcoinFinality()
	bf.BTCTransactionIndex = 20
	if err := checkBitcoinFinality(bf); err == nil {
		t.Error("Bitcoin finality succeeded, should have failed")
	}
}
