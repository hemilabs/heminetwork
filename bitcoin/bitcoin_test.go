// Copyright (c) 2024 Hemi Labs, Inc.
// Use of this source code is governed by the MIT License,
// which can be found in the LICENSE file.

package bitcoin

import (
	"errors"
	"testing"
)

func TestValidateMerklePathOne(t *testing.T) {
	index := 3

	txHash := "3eeebe233e20859f7d888521c58d052a65dbf728b7a968af2efdfd79655ebff9"

	merkleRoot := "8d959c33bb0c2cbd1a6ebb24411fc71fb7084e357edb1115f567b0bc374168db"

	merkleHashes := []string{
		"caa404f96ff2560078bdcc8752842cc628bbf7555a0f8e23985727e36789167b",
		"170237c6f86c619b3d65945795dfe52f1889e2e62a0ea9848c7f381f16292a45",
		"8d2ce625665e9a11986530d7bb7ab5c6549273d4bc92f09ca0ab1c1b7251aafb",
		"1423d272aecbdccb7d72e94adb17981e34e4b43a3ed079ae9743ff3636096333",
	}

	err := ValidateMerkleRoot(txHash, merkleHashes, uint32(index), merkleRoot)
	if err != nil {
		t.Fatal(err)
	}
}

func TestValidateMerklePathTwo(t *testing.T) {
	index := 6

	txHash := "d92ae4f9e9d7c6097219b807c6186d2cd3266b408fb51979bdff6e97ccd40fb3"

	merkleRoot := "e9761619749fa9b71e57e8b43deaa17a275ae6c50ecd8bc9d306fd405206bc4c"

	merkleHashes := []string{
		"2455f072af2695304fda4cf262f23b60ab7cc2b474291f1801738a390c1da6f4",
		"aab2e23cc321faa4c7b8f1318e9f2a4e2d591a15923eccb3e221c43af818b438",
		"a7f14dcd5493b1987c927810e8e29f91f3235d9517c76b839c5d6abc10103274",
		"af9c8b69f2744e28a06a94746204c238a122221746da1c73fdb9f224fc688f15",
		"198208c8d262af23cadf3ba980c962e1fd69d6971e9241c5e92ccae6cefa431e",
		"c4c4257a09409325e1e06ef2d622dc295d3dd404375dc6b7771de24c9413b0fb",
		"04dfb92d02b3ad2eaad3930b34993c39bb138a3c1102bc29045e342d6bf1e480",
		"b591703500d8bcecca79361efd7a3d112cbc162d27df10b80c875e51ffa27680",
	}

	err := ValidateMerkleRoot(txHash, merkleHashes, uint32(index), merkleRoot)
	if err != nil {
		t.Fatal(err)
	}
}

func TestValidateInvalidMerklePathOne(t *testing.T) {
	index := 6

	txHash := "e92ae4f9e9d7c6097219b807c6186d2cd3266b408fb51979bdff6e97ccd40fb3"

	merkleRoot := "4cbc065240fd06d3c98bcd0ec5e65a277aa1ea3db4e8571eb7a99f74191676e9"

	merkleHashes := []string{
		"2455f072af2695304fda4cf262f23b60ab7cc2b474291f1801738a390c1da6f4",
		"aab2e23cc321faa4c7b8f1318e9f2a4e2d591a15923eccb3e221c43af818b438",
		"a7f14dcd5493b1987c927810e8e29f91f3235d9517c76b839c5d6abc10103274",
		"af9c8b69f2744e28a06a94746204c238a122221746da1c73fdb9f224fc688f15",
		"198208c8d262af23cadf3ba980c962e1fd69d6971e9241c5e92ccae6cefa431e",
		"c4c4257a09409325e1e06ef2d622dc295d3dd404375dc6b7771de24c9413b0fb",
		"04dfb92d02b3ad2eaad3930b34993c39bb138a3c1102bc29045e342d6bf1e480",
		"b591703500d8bcecca79361efd7a3d112cbc162d27df10b80c875e51ffa27680",
	}

	err := ValidateMerkleRoot(txHash, merkleHashes, uint32(index), merkleRoot)
	if err == nil || errors.Is(err, ErrInvalidMerkle) == false {
		t.Fatalf("unexpected error %s", err)
	}
}

func TestCheckMerkleChain(t *testing.T) {
	tests := []struct {
		leaf         []byte
		index        uint32
		merkleHashes [][]byte
		merkleRoot   []byte
	}{
		{
			leaf: []byte{
				0x14, 0x06, 0xe0, 0x58, 0x81, 0xe2, 0x99, 0x36,
				0x77, 0x66, 0xd3, 0x13, 0xe2, 0x6c, 0x05, 0x56,
				0x4e, 0xc9, 0x1b, 0xf7, 0x21, 0xd3, 0x17, 0x26,
				0xbd, 0x6e, 0x46, 0xe6, 0x06, 0x89, 0x53, 0x9a,
			},
			index: 0,
			merkleHashes: [][]byte{
				{
					0x9c, 0x12, 0xcf, 0xdc, 0x04, 0xc7, 0x45, 0x84,
					0xd7, 0x87, 0xac, 0x3d, 0x23, 0x77, 0x21, 0x32,
					0xc1, 0x85, 0x24, 0xbc, 0x7a, 0xb2, 0x8d, 0xec,
					0x42, 0x19, 0xb8, 0xfc, 0x5b, 0x42, 0x5f, 0x70,
				},
				{
					0x54, 0x69, 0xb9, 0xf8, 0x68, 0x8b, 0xf3, 0x33,
					0x2b, 0x52, 0x54, 0x8d, 0x8c, 0x9b, 0x1e, 0x3f,
					0x05, 0x5d, 0x44, 0x91, 0x9e, 0x81, 0x7b, 0x13,
					0x9c, 0x0c, 0x12, 0x23, 0xe8, 0x21, 0xc8, 0xe1,
				},
				{
					0x10, 0x83, 0xf3, 0xc1, 0x37, 0x2c, 0x20, 0xbe,
					0x05, 0x3f, 0xd1, 0xd0, 0x2a, 0xa6, 0x00, 0xc0,
					0xc5, 0xf1, 0xa9, 0x21, 0x41, 0x90, 0x63, 0x08,
					0xa8, 0x17, 0x4f, 0x60, 0x49, 0x1a, 0x4d, 0xcd,
				},
				{
					0xea, 0xfe, 0x80, 0x20, 0x54, 0xa4, 0x03, 0x3d,
					0x2a, 0x75, 0xec, 0x02, 0x13, 0x9a, 0x40, 0xbc,
					0x04, 0x99, 0xa5, 0x75, 0x48, 0x59, 0xab, 0xc6,
					0x8b, 0x1e, 0x54, 0x77, 0xe3, 0xd4, 0xdb, 0x4d,
				},
			},
			merkleRoot: []byte{
				0x75, 0x29, 0x58, 0x7e, 0x6a, 0xc1, 0x58, 0xc0,
				0x29, 0x1c, 0x76, 0x36, 0x27, 0x8d, 0x88, 0x5a,
				0xaa, 0x78, 0xaf, 0xb1, 0x03, 0x14, 0xae, 0x39,
				0x95, 0xec, 0x19, 0x42, 0xe0, 0xbd, 0x7a, 0x7c,
			},
		},
		{
			leaf: []byte{
				0x9c, 0x12, 0xcf, 0xdc, 0x04, 0xc7, 0x45, 0x84,
				0xd7, 0x87, 0xac, 0x3d, 0x23, 0x77, 0x21, 0x32,
				0xc1, 0x85, 0x24, 0xbc, 0x7a, 0xb2, 0x8d, 0xec,
				0x42, 0x19, 0xb8, 0xfc, 0x5b, 0x42, 0x5f, 0x70,
			},
			index: 1,
			merkleHashes: [][]byte{
				{
					0x14, 0x06, 0xe0, 0x58, 0x81, 0xe2, 0x99, 0x36,
					0x77, 0x66, 0xd3, 0x13, 0xe2, 0x6c, 0x05, 0x56,
					0x4e, 0xc9, 0x1b, 0xf7, 0x21, 0xd3, 0x17, 0x26,
					0xbd, 0x6e, 0x46, 0xe6, 0x06, 0x89, 0x53, 0x9a,
				},
				{
					0x54, 0x69, 0xb9, 0xf8, 0x68, 0x8b, 0xf3, 0x33,
					0x2b, 0x52, 0x54, 0x8d, 0x8c, 0x9b, 0x1e, 0x3f,
					0x05, 0x5d, 0x44, 0x91, 0x9e, 0x81, 0x7b, 0x13,
					0x9c, 0x0c, 0x12, 0x23, 0xe8, 0x21, 0xc8, 0xe1,
				},
				{
					0x10, 0x83, 0xf3, 0xc1, 0x37, 0x2c, 0x20, 0xbe,
					0x05, 0x3f, 0xd1, 0xd0, 0x2a, 0xa6, 0x00, 0xc0,
					0xc5, 0xf1, 0xa9, 0x21, 0x41, 0x90, 0x63, 0x08,
					0xa8, 0x17, 0x4f, 0x60, 0x49, 0x1a, 0x4d, 0xcd,
				},
				{
					0xea, 0xfe, 0x80, 0x20, 0x54, 0xa4, 0x03, 0x3d,
					0x2a, 0x75, 0xec, 0x02, 0x13, 0x9a, 0x40, 0xbc,
					0x04, 0x99, 0xa5, 0x75, 0x48, 0x59, 0xab, 0xc6,
					0x8b, 0x1e, 0x54, 0x77, 0xe3, 0xd4, 0xdb, 0x4d,
				},
			},
			merkleRoot: []byte{
				0x75, 0x29, 0x58, 0x7e, 0x6a, 0xc1, 0x58, 0xc0,
				0x29, 0x1c, 0x76, 0x36, 0x27, 0x8d, 0x88, 0x5a,
				0xaa, 0x78, 0xaf, 0xb1, 0x03, 0x14, 0xae, 0x39,
				0x95, 0xec, 0x19, 0x42, 0xe0, 0xbd, 0x7a, 0x7c,
			},
		},
		{
			leaf: []byte{
				0xb6, 0xd5, 0x8d, 0xfa, 0x65, 0x47, 0xc1, 0xeb,
				0x7f, 0x0d, 0x4f, 0xfd, 0x3e, 0x3b, 0xd6, 0x45,
				0x22, 0x13, 0x21, 0x0e, 0xa5, 0x1b, 0xaa, 0x70,
				0xb9, 0x7c, 0x31, 0xf0, 0x11, 0x18, 0x72, 0x15,
			},
			index: 7,
			merkleHashes: [][]byte{
				{
					0xf3, 0x03, 0x5c, 0x79, 0xa8, 0x4a, 0x2d, 0xda,
					0x7a, 0x7b, 0x5f, 0x35, 0x6b, 0x3a, 0xeb, 0x82,
					0xfb, 0x93, 0x4d, 0x5f, 0x12, 0x6a, 0xf9, 0x9b,
					0xbe, 0xe9, 0xa4, 0x04, 0xc4, 0x25, 0xb8, 0x88,
				},
				{
					0x9b, 0x6a, 0x80, 0xad, 0xbf, 0xaf, 0x86, 0x36,
					0xcc, 0x89, 0x70, 0x28, 0xdb, 0x2a, 0x28, 0xc4,
					0x31, 0xa9, 0xdc, 0x7b, 0xda, 0xf1, 0x66, 0xe4,
					0x09, 0xe1, 0xec, 0x74, 0xfa, 0xae, 0xac, 0x46,
				},
				{
					0xe3, 0x2f, 0x57, 0x01, 0xa0, 0x11, 0x5a, 0x2b,
					0x4d, 0xc7, 0x2f, 0x52, 0x6a, 0xf1, 0x61, 0x4c,
					0x59, 0x2c, 0x19, 0xee, 0x95, 0xcf, 0xcb, 0x05,
					0x35, 0x96, 0x1e, 0x07, 0x67, 0xba, 0xf7, 0x8e,
				},
				{
					0xea, 0xfe, 0x80, 0x20, 0x54, 0xa4, 0x03, 0x3d,
					0x2a, 0x75, 0xec, 0x02, 0x13, 0x9a, 0x40, 0xbc,
					0x04, 0x99, 0xa5, 0x75, 0x48, 0x59, 0xab, 0xc6,
					0x8b, 0x1e, 0x54, 0x77, 0xe3, 0xd4, 0xdb, 0x4d,
				},
			},
			merkleRoot: []byte{
				0x75, 0x29, 0x58, 0x7e, 0x6a, 0xc1, 0x58, 0xc0,
				0x29, 0x1c, 0x76, 0x36, 0x27, 0x8d, 0x88, 0x5a,
				0xaa, 0x78, 0xaf, 0xb1, 0x03, 0x14, 0xae, 0x39,
				0x95, 0xec, 0x19, 0x42, 0xe0, 0xbd, 0x7a, 0x7c,
			},
		},
		{
			leaf: []byte{
				0x42, 0xbb, 0xaf, 0xcd, 0xee, 0x80, 0x7b, 0xf0,
				0xe1, 0x45, 0x77, 0xe5, 0xfa, 0x6e, 0xd1, 0xbc,
				0x0c, 0xd1, 0x9b, 0xe4, 0xf7, 0x37, 0x7d, 0x31,
				0xd9, 0x0c, 0xd7, 0x00, 0x8c, 0xb7, 0x4d, 0x73,
			},
			index: 8,
			merkleHashes: [][]byte{
				{
					0x42, 0xbb, 0xaf, 0xcd, 0xee, 0x80, 0x7b, 0xf0,
					0xe1, 0x45, 0x77, 0xe5, 0xfa, 0x6e, 0xd1, 0xbc,
					0x0c, 0xd1, 0x9b, 0xe4, 0xf7, 0x37, 0x7d, 0x31,
					0xd9, 0x0c, 0xd7, 0x00, 0x8c, 0xb7, 0x4d, 0x73,
				},
				{
					0x99, 0x1f, 0x47, 0xc5, 0xd9, 0x8c, 0x27, 0x0d,
					0xa2, 0x71, 0x5b, 0x6c, 0x39, 0xb9, 0x14, 0x2e,
					0x24, 0x2d, 0x7d, 0xbe, 0x90, 0x69, 0x34, 0x98,
					0xe5, 0x45, 0x47, 0x17, 0x47, 0x9e, 0xd5, 0x10,
				},
				{
					0x9b, 0xed, 0xe8, 0x51, 0xb5, 0x83, 0x9a, 0xd6,
					0x9c, 0xad, 0x60, 0x32, 0x99, 0x20, 0x31, 0x95,
					0x87, 0x6e, 0x4e, 0x98, 0x5c, 0x27, 0x3b, 0x4f,
					0xf9, 0x8c, 0x52, 0xbe, 0x7c, 0x18, 0x9d, 0x7c,
				},
				{
					0x6f, 0x97, 0x28, 0x2a, 0xb3, 0x47, 0xa2, 0x65,
					0xae, 0x33, 0x83, 0xe1, 0x56, 0x9e, 0x62, 0xda,
					0x8c, 0x19, 0xa6, 0x8c, 0xfa, 0x67, 0x0d, 0x2b,
					0x61, 0x7a, 0x7f, 0xed, 0x47, 0x44, 0xbb, 0xfe,
				},
			},
			merkleRoot: []byte{
				0x75, 0x29, 0x58, 0x7e, 0x6a, 0xc1, 0x58, 0xc0,
				0x29, 0x1c, 0x76, 0x36, 0x27, 0x8d, 0x88, 0x5a,
				0xaa, 0x78, 0xaf, 0xb1, 0x03, 0x14, 0xae, 0x39,
				0x95, 0xec, 0x19, 0x42, 0xe0, 0xbd, 0x7a, 0x7c,
			},
		},
	}
	for i, test := range tests {
		if err := CheckMerkleChain(test.leaf, test.index, test.merkleHashes, test.merkleRoot); err != nil {
			t.Errorf("Test %d - failed to validate merkle chain: %v", i, err)
		}
	}
}
